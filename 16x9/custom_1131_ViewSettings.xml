<?xml version="1.0" encoding="UTF-8"?>
<window id="1131" type="dialog">
	<defaultcontrol always="true">9011</defaultcontrol>
	<onunload>ClearProperty(actualViewtype,Home)</onunload>
	<controls>
		<control type="button" id="8999">
			<left>365</left>
			<top>-11</top>
			<width>64</width>
			<height>48</height>
			<label>ï•³</label>
			<font>CloseButton</font>
			<textcolor>grey</textcolor>
			<focusedcolor>$VAR[ThemeLabelColor]</focusedcolor>
			<onclick>Dialog.Close(1131)</onclick>
			<texturefocus />
			<texturenofocus />
			<visible>system.getbool(input.enablemouse)</visible>
		</control>
		<control type="group">
			<include>WindowSettingsFadeAnimation</include>
			<control type="label">
				<top>80</top>
				<width>400</width>
				<height>48</height>
				<textoffsetx>15</textoffsetx>
				<font>font13_title</font>
				<label>$INFO[Container.Viewmode] $LOCALIZE[5]</label>
				<textcolor>$VAR[ThemeLabelColor]</textcolor>
			</control>
			<control type="grouplist" id="9011">
				<top>128</top>
				<width>400</width>
				<height>915</height>
				<onleft>Dialog.Close(1131)</onleft>
				<onright>Dialog.Close(1131)</onright>
				<onup>9011</onup>
				<ondown>9011</ondown>
				<!-- Top Settings -->
				<!-- Button IDs (1500-1509) -->
				<!-- TopBar -->
				<control type="button" id="1500">
					<include>ButtonCommonValues</include>
					<label>$LOCALIZE[31252]</label>
					<label2>[COLOR $VAR[ThemeLabelColor]]$VAR[NoTopBarLabelVar][/COLOR]</label2>
					<onclick>$VAR[NoTopBarOnClickVar]</onclick>
					<visible>!Skin.HasSetting(Disable.TopBar)</visible>
				</control>
				<!-- Watched Status Indicators -->
				<control type="button" id="1501">
					<include>ButtonCommonValues</include>
					<label>$LOCALIZE[31188]</label>
					<label2>[COLOR $VAR[ThemeLabelColor]]$VAR[DisableOverlayLabelVar][/COLOR]</label2>
					<onclick>$VAR[DisableOverlayOnclickVar]</onclick>
					<visible>[!String.IsEmpty(Skin.String(Overlay.Toggle)) | !Skin.HasSetting(Disable.Resumable)] + !Window.IsActive(music) + !Window.IsActive(programs) + !Container.Content(genres)</visible>
					<visible>[String.IsEqual(Window(Home).Property(actualViewtype),Landscape) | String.IsEqual(Window(Home).Property(actualViewtype),ShowCase) | String.IsEqual(Window(Home).Property(actualViewtype),MyFlix) | String.IsEqual(Window(Home).Property(actualViewtype),Icons) | String.IsEqual(Window(Home).Property(actualViewtype),Wall) | [String.IsEqual(Window(Home).Property(actualViewtype),FullscreenWall) + [Container.Content(movies) | Container.Content(tvshows) | Container.Content(sets)]] | String.IsEqual(Window(Home).Property(actualViewtype),InfoWall) | String.IsEqual(Window(Home).Property(actualViewtype),BannerWall) | String.IsEqual(Window(Home).Property(actualViewtype),BigList) | String.IsEqual(Window(Home).Property(actualViewtype),Shift) | String.IsEqual(Window(Home).Property(actualViewtype),Posters) | String.IsEqual(Window(Home).Property(actualViewtype),BigFan) | String.IsEqual(Window(Home).Property(actualViewtype),Gallery)]</visible>
				</control>
				<!-- Mediaflags -->
				<control type="button" id="1502">
					<include>ButtonCommonValues</include>
					<label>$LOCALIZE[31255]</label>
					<label2>[COLOR $VAR[ThemeLabelColor]]$VAR[ViewFlagsLabelVar][/COLOR]</label2>
					<onclick>$VAR[ViewFlagsOnclickVar]</onclick>
					<visible>!Container.Content(genres) + !Container.Content(sets)</visible>
					<visible>String.IsEqual(Window(Home).Property(actualViewtype),ShowCase) | [String.IsEqual(Window(Home).Property(actualViewtype),Landscape) + !Window.IsActive(music)] | [String.IsEqual(Window(Home).Property(actualViewtype),Wall) + ![Container.Content(programs) | Container.Content(addons) | Window.IsActive(music)]] | String.IsEqual(Window(Home).Property(actualViewtype),Logo)</visible>
				</control>
				<!-- <control type="radiobutton" id="1503">
					<include>ButtonCommonValues</include>
					<label>$LOCALIZE[31255]</label>
					<onclick></onclick>
					<selected></selected>
					<visible></visible>
				</control> -->
				<!-- View Settings -->
				<!-- Button IDs (1510-1549) -->
				<include condition="String.IsEqual(Window(Home).Property(actualViewtype),List)">ListViewSettings</include>
				<include condition="String.IsEqual(Window(Home).Property(actualViewtype),InfoWall)">InfoWallViewSettings</include>
				<include condition="String.IsEqual(Window(Home).Property(actualViewtype),Landscape)">LandscapeViewSettings</include>
				<include condition="String.IsEqual(Window(Home).Property(actualViewtype),ShowCase)">ShowCaseViewSettings</include>
				<include condition="String.IsEqual(Window(Home).Property(actualViewtype),ShowCaseSquare)">ShowCaseSquareViewSettings</include>
				<include condition="String.IsEqual(Window(Home).Property(actualViewtype),TriPanel)">TriPanelViewSettings</include>
				<include condition="String.IsEqual(Window(Home).Property(actualViewtype),Posters)">PostersViewSettings</include>
				<include condition="String.IsEqual(Window(Home).Property(actualViewtype),Shift)">ShiftViewSettings</include>
				<include condition="String.IsEqual(Window(Home).Property(actualViewtype),BannerWall)">BannerWallViewSettings</include>
				<include condition="String.IsEqual(Window(Home).Property(actualViewtype),Logo)">LogoViewSettings</include>
				<include condition="String.IsEqual(Window(Home).Property(actualViewtype),Icons)">IconsViewSettings</include>
				<include condition="String.IsEqual(Window(Home).Property(actualViewtype),LowList)">LowListViewSettings</include>
				<include condition="String.IsEqual(Window(Home).Property(actualViewtype),Episode)">EpisodeViewSettings</include>
				<include condition="String.IsEqual(Window(Home).Property(actualViewtype),Wall)">WallViewSettings</include>
				<include condition="String.IsEqual(Window(Home).Property(actualViewtype),Gallery)">GalleryViewSettings</include>
				<include condition="String.IsEqual(Window(Home).Property(actualViewtype),Panel)">PanelViewSettings</include>
				<include condition="String.IsEqual(Window(Home).Property(actualViewtype),RightList)">RightListViewSettings</include>
				<include condition="String.IsEqual(Window(Home).Property(actualViewtype),BigList)">BigListViewSettings</include>
				<include condition="String.IsEqual(Window(Home).Property(actualViewtype),SongList)">SongListViewSettings</include>
				<include condition="String.IsEqual(Window(Home).Property(actualViewtype),MyFlix)">MyFlixViewSettings</include>
				<include condition="String.IsEqual(Window(Home).Property(actualViewtype),BigFan)">BigFanViewSettings</include>
				<include condition="String.IsEqual(Window(Home).Property(actualViewtype),FanartList)">FanartListViewSettings</include>
				<include condition="String.IsEqual(Window(Home).Property(actualViewtype),MusicJukeBox)">MusicJukeBoxViewSettings</include>
				<include condition="String.IsEqual(Window(Home).Property(actualViewtype),FullscreenWall)">FullscreenWallViewSettings</include>
				<!-- Bottom Settings -->
				<!-- Button IDs (1550-1559) -->
				<!-- InfoPopup Delay -->
				<control type="button" id="1550">
					<include>ButtonCommonValues</include>
					<label>  - $LOCALIZE[303]</label>
					<label2>[COLOR $VAR[ThemeLabelColor]]$INFO[Skin.String(InfoPopup.Delay),, $LOCALIZE[31090]][/COLOR]</label2>
					<onclick>$VAR[InfoPopupDelayOnClickVar]</onclick>
					<visible>[String.IsEqual(Window(Home).Property(actualViewtype),FullscreenWall) + Skin.HasSetting(Enable.FullscreenWallInfoPopup)] | [String.IsEqual(Window(Home).Property(actualViewtype),RightList) + Skin.HasSetting(Enable.RightlistInfoPopup) + Skin.HasSetting(inforightlist)] | [String.IsEqual(Window(Home).Property(actualViewtype),Icons) + Skin.HasSetting(Enable.IconsInfoPopup)] | [String.IsEqual(Window(Home).Property(actualViewtype),BannerWall) + Skin.HasSetting(Disable.BannerWallInfo) + Skin.HasSetting(Enable.BannerWallInfoPopup)] + !Window.IsActive(music)</visible>
					<visible>!Container.Content(genres)</visible>
				</control>
				<!-- HD/SD/3D Indicators -->
				<control type="button" id="1551">
					<include>ButtonCommonValues</include>
					<label>$LOCALIZE[31607]</label>
					<label2>[COLOR $VAR[ThemeLabelColor]]$VAR[DisableHDIndicatorsLabelVar][/COLOR]</label2>
					<onclick condition="String.IsEqual(Window(Home).Property(actualViewtype),List)">Skin.ToggleSetting(noindicatorlist)</onclick>
					<onclick condition="String.IsEqual(Window(Home).Property(actualViewtype),FanartList)">Skin.ToggleSetting(noindicatorfanartlist)</onclick>
					<onclick condition="String.IsEqual(Window(Home).Property(actualViewtype),Wall)">Skin.ToggleSetting(noindicatorwall)</onclick>
					<onclick condition="String.IsEqual(Window(Home).Property(actualViewtype),Gallery)">Skin.ToggleSetting(noindicatorgallery)</onclick>
					<onclick condition="String.IsEqual(Window(Home).Property(actualViewtype),BigList)">Skin.ToggleSetting(noindicatorbiglist)</onclick>
					<visible>Window.IsMedia + !Window.IsVisible(addonbrowser) + !Window.IsVisible(favouritesbrowser)</visible>
					<visible>[String.IsEqual(Window(Home).Property(actualViewtype),List)] | [String.IsEqual(Window(Home).Property(actualViewtype),FanartList)] | [String.IsEqual(Window(Home).Property(actualViewtype),BigList)] | [String.IsEqual(Window(Home).Property(actualViewtype),Gallery)]</visible>
					<visible>!Window.IsActive(music) + !Container.Content(tvshows) + !Container.Content(seasons) + !Container.Content(genres) + !Container.Content(sets)</visible>
				</control>
			</control>
		</control>
	</controls>
</window>